#pragma once
#include "main.h"

inline constexpr uint64_t square_bb[65] =
{
  0x1, 0x2, 0x4, 0x8,
  0x10, 0x20, 0x40, 0x80,
  0x100, 0x200, 0x400, 0x800,
  0x1000, 0x2000, 0x4000, 0x8000,
  0x10000, 0x20000, 0x40000, 0x80000,
  0x100000, 0x200000, 0x400000, 0x800000,
  0x1000000, 0x2000000, 0x4000000, 0x8000000,
  0x10000000, 0x20000000, 0x40000000, 0x80000000,
  0x100000000, 0x200000000, 0x400000000, 0x800000000,
  0x1000000000, 0x2000000000, 0x4000000000, 0x8000000000,
  0x10000000000, 0x20000000000, 0x40000000000, 0x80000000000,
  0x100000000000, 0x200000000000, 0x400000000000, 0x800000000000,
  0x1000000000000, 0x2000000000000, 0x4000000000000, 0x8000000000000,
  0x10000000000000, 0x20000000000000, 0x40000000000000, 0x80000000000000,
  0x100000000000000, 0x200000000000000, 0x400000000000000, 0x800000000000000,
  0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000,
  0x0
};

constexpr uint64_t king_attacks[64] =
{
  0x302, 0x705, 0xe0a, 0x1c14,
  0x3828, 0x7050, 0xe0a0, 0xc040,
  0x30203, 0x70507, 0xe0a0e, 0x1c141c,
  0x382838, 0x705070, 0xe0a0e0, 0xc040c0,
  0x3020300, 0x7050700, 0xe0a0e00, 0x1c141c00,
  0x38283800, 0x70507000, 0xe0a0e000, 0xc040c000,
  0x302030000, 0x705070000, 0xe0a0e0000, 0x1c141c0000,
  0x3828380000, 0x7050700000, 0xe0a0e00000, 0xc040c00000,
  0x30203000000, 0x70507000000, 0xe0a0e000000, 0x1c141c000000,
  0x382838000000, 0x705070000000, 0xe0a0e0000000, 0xc040c0000000,
  0x3020300000000, 0x7050700000000, 0xe0a0e00000000, 0x1c141c00000000,
  0x38283800000000, 0x70507000000000, 0xe0a0e000000000, 0xc040c000000000,
  0x302030000000000, 0x705070000000000, 0xe0a0e0000000000, 0x1c141c0000000000,
  0x3828380000000000, 0x7050700000000000, 0xe0a0e00000000000, 0xc040c00000000000,
  0x203000000000000, 0x507000000000000, 0xa0e000000000000, 0x141c000000000000,
  0x2838000000000000, 0x5070000000000000, 0xa0e0000000000000, 0x40c0000000000000,
};

constexpr uint64_t knight_attacks[64] =
{
  0x20400, 0x50800, 0xa1100, 0x142200,
  0x284400, 0x508800, 0xa01000, 0x402000,
  0x2040004, 0x5080008, 0xa110011, 0x14220022,
  0x28440044, 0x50880088, 0xa0100010, 0x40200020,
  0x204000402, 0x508000805, 0xa1100110a, 0x1422002214,
  0x2844004428, 0x5088008850, 0xa0100010a0, 0x4020002040,
  0x20400040200, 0x50800080500, 0xa1100110a00, 0x142200221400,
  0x284400442800, 0x508800885000, 0xa0100010a000, 0x402000204000,
  0x2040004020000, 0x5080008050000, 0xa1100110a0000, 0x14220022140000,
  0x28440044280000, 0x50880088500000, 0xa0100010a00000, 0x40200020400000,
  0x204000402000000, 0x508000805000000, 0xa1100110a000000, 0x1422002214000000,
  0x2844004428000000, 0x5088008850000000, 0xa0100010a0000000, 0x4020002040000000,
  0x400040200000000, 0x800080500000000, 0x1100110a00000000, 0x2200221400000000,
  0x4400442800000000, 0x8800885000000000, 0x100010a000000000, 0x2000204000000000,
  0x4020000000000, 0x8050000000000, 0x110a0000000000, 0x22140000000000,
  0x44280000000000, 0x0088500000000000, 0x0010a00000000000, 0x20400000000000
};

constexpr uint64_t white_pawn_attacks[64] =
{
  0x200, 0x500, 0xa00, 0x1400,
  0x2800, 0x5000, 0xa000, 0x4000,
  0x20000, 0x50000, 0xa0000, 0x140000,
  0x280000, 0x500000, 0xa00000, 0x400000,
  0x2000000, 0x5000000, 0xa000000, 0x14000000,
  0x28000000, 0x50000000, 0xa0000000, 0x40000000,
  0x200000000, 0x500000000, 0xa00000000, 0x1400000000,
  0x2800000000, 0x5000000000, 0xa000000000, 0x4000000000,
  0x20000000000, 0x50000000000, 0xa0000000000, 0x140000000000,
  0x280000000000, 0x500000000000, 0xa00000000000, 0x400000000000,
  0x2000000000000, 0x5000000000000, 0xa000000000000, 0x14000000000000,
  0x28000000000000, 0x50000000000000, 0xa0000000000000, 0x40000000000000,
  0x200000000000000, 0x500000000000000, 0xa00000000000000, 0x1400000000000000,
  0x2800000000000000, 0x5000000000000000, 0xa000000000000000, 0x4000000000000000,
  0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0,
};

constexpr uint64_t black_pawn_attacks[64] =
{
  0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0,
  0x2, 0x5, 0xa, 0x14,
  0x28, 0x50, 0xa0, 0x40,
  0x200, 0x500, 0xa00, 0x1400,
  0x2800, 0x5000, 0xa000, 0x4000,
  0x20000, 0x50000, 0xa0000, 0x140000,
  0x280000, 0x500000, 0xa00000, 0x400000,
  0x2000000, 0x5000000, 0xa000000, 0x14000000,
  0x28000000, 0x50000000, 0xa0000000, 0x40000000,
  0x200000000, 0x500000000, 0xa00000000, 0x1400000000,
  0x2800000000, 0x5000000000, 0xa000000000, 0x4000000000,
  0x20000000000, 0x50000000000, 0xa0000000000, 0x140000000000,
  0x280000000000, 0x500000000000, 0xa00000000000, 0x400000000000,
  0x2000000000000, 0x5000000000000, 0xa000000000000, 0x14000000000000,
  0x28000000000000, 0x50000000000000, 0xa0000000000000, 0x40000000000000,
};

inline constexpr uint64_t bishop_magics[64] =
{
  0x0002020202020200, 0x0002020202020000, 0x0004010202000000, 0x0004040080000000,
  0x0001104000000000, 0x0000821040000000, 0x0000410410400000, 0x0000104104104000,
  0x0000040404040400, 0x0000020202020200, 0x0000040102020000, 0x0000040400800000,
  0x0000011040000000, 0x0000008210400000, 0x0000004104104000, 0x0000002082082000,
  0x0004000808080800, 0x0002000404040400, 0x0001000202020200, 0x0000800802004000,
  0x0000800400A00000, 0x0000200100884000, 0x0000400082082000, 0x0000200041041000,
  0x0002080010101000, 0x0001040008080800, 0x0000208004010400, 0x0000404004010200,
  0x0000840000802000, 0x0000404002011000, 0x0000808001041000, 0x0000404000820800,
  0x0001041000202000, 0x0000820800101000, 0x0000104400080800, 0x0000020080080080,
  0x0000404040040100, 0x0000808100020100, 0x0001010100020800, 0x0000808080010400,
  0x0000820820004000, 0x0000410410002000, 0x0000082088001000, 0x0000002011000800,
  0x0000080100400400, 0x0001010101000200, 0x0002020202000400, 0x0001010101000200,
  0x0000410410400000, 0x0000208208200000, 0x0000002084100000, 0x0000000020880000,
  0x0000001002020000, 0x0000040408020000, 0x0004040404040000, 0x0002020202020000,
  0x0000104104104000, 0x0000002082082000, 0x0000000020841000, 0x0000000000208800,
  0x0000000010020200, 0x0000000404080200, 0x0000040404040400, 0x0002020202020200
};

inline constexpr uint64_t rook_magics[64] =
{
  0x0080001020400080, 0x0040001000200040, 0x0080081000200080, 0x0080040800100080,
  0x0080020400080080, 0x0080010200040080, 0x0080008001000200, 0x0080002040800100,
  0x0000800020400080, 0x0000400020005000, 0x0000801000200080, 0x0000800800100080,
  0x0000800400080080, 0x0000800200040080, 0x0000800100020080, 0x0000800040800100,
  0x0000208000400080, 0x0000404000201000, 0x0000808010002000, 0x0000808008001000,
  0x0000808004000800, 0x0000808002000400, 0x0000010100020004, 0x0000020000408104,
  0x0000208080004000, 0x0000200040005000, 0x0000100080200080, 0x0000080080100080,
  0x0000040080080080, 0x0000020080040080, 0x0000010080800200, 0x0000800080004100,
  0x0000204000800080, 0x0000200040401000, 0x0000100080802000, 0x0000080080801000,
  0x0000040080800800, 0x0000020080800400, 0x0000020001010004, 0x0000800040800100,
  0x0000204000808000, 0x0000200040008080, 0x0000100020008080, 0x0000080010008080,
  0x0000040008008080, 0x0000020004008080, 0x0000010002008080, 0x0000004081020004,
  0x0000204000800080, 0x0000200040008080, 0x0000100020008080, 0x0000080010008080,
  0x0000040008008080, 0x0000020004008080, 0x0000800100020080, 0x0000800041000080,
  0x00FFFCDDFCED714A, 0x007FFCDDFCED714A, 0x003FFFCDFFD88096, 0x0000040810002101,
  0x0001000204080011, 0x0001000204000801, 0x0001000082000401, 0x0001FFFAABFAD1A2
};

inline constexpr uint64_t mask_file[8] =
{
  0x101010101010101, 0x202020202020202, 0x404040404040404, 0x808080808080808,
  0x1010101010101010, 0x2020202020202020, 0x4040404040404040, 0x8080808080808080,
};

inline constexpr uint64_t mask_rank[8] =
{
  0xff, 0xff00, 0xff0000, 0xff000000,
  0xff00000000, 0xff0000000000, 0xff000000000000, 0xff00000000000000
};

inline constexpr uint64_t mask_diagonal[15] =
{
  0x80, 0x8040, 0x804020,
  0x80402010, 0x8040201008, 0x804020100804,
  0x80402010080402, 0x8040201008040201, 0x4020100804020100,
  0x2010080402010000, 0x1008040201000000, 0x804020100000000,
  0x402010000000000, 0x201000000000000, 0x100000000000000,
};

inline constexpr uint64_t mask_anti_diagonal[15] =
{
  0x1, 0x102, 0x10204,
  0x1020408, 0x102040810, 0x10204081020,
  0x1020408102040, 0x102040810204080, 0x204081020408000,
  0x408102040800000, 0x810204080000000, 0x1020408000000000,
  0x2040800000000000, 0x4080000000000000, 0x8000000000000000,
};

constexpr uint64_t shift(const direction d, const uint64_t b)
{
  return d == north
           ? b << 8
           : d == south
           ? b >> 8
           : d == north + north
           ? b << 16
           : d == south + south
           ? b >> 16
           : d == east
           ? (b & ~mask_file[h_file]) << 1
           : d == west
           ? (b & ~mask_file[a_file]) >> 1
           : d == northeast
           ? (b & ~mask_file[h_file]) << 9
           : d == northwest
           ? (b & ~mask_file[a_file]) << 7
           : d == southeast
           ? (b & ~mask_file[h_file]) >> 7
           : d == southwest
           ? (b & ~mask_file[a_file]) >> 9
           : 0;
}

constexpr uint64_t white_oo_mask = 0x90;
constexpr uint64_t white_ooo_mask = 0x11;
constexpr uint64_t white_oo_blockers_and_attackers_mask = 0x60;
constexpr uint64_t white_ooo_blockers_and_attackers_mask = 0xe;

constexpr uint64_t black_oo_mask = 0x9000000000000000;
constexpr uint64_t black_ooo_mask = 0x1100000000000000;
constexpr uint64_t black_oo_blockers_and_attackers_mask = 0x6000000000000000;
constexpr uint64_t black_ooo_blockers_and_attackers_mask = 0xE00000000000000;

constexpr uint64_t all_castling_mask = 0x9100000000000091;

constexpr uint64_t oo_mask(const color c) { return c == white ? white_oo_mask : black_oo_mask; }
constexpr uint64_t ooo_mask(const color c) { return c == white ? white_ooo_mask : black_ooo_mask; }

constexpr uint64_t oo_blockers_mask(const color c)
{
  return c == white ? white_oo_blockers_and_attackers_mask : black_oo_blockers_and_attackers_mask;
}

constexpr uint64_t ooo_blockers_mask(const color c)
{
  return c == white ? white_ooo_blockers_and_attackers_mask : black_ooo_blockers_and_attackers_mask;
}

constexpr uint64_t ignore_ooo_danger(const color c) { return c == white ? 0x2 : 0x200000000000000; }

void init_tables();
inline uint64_t bishop_attack_masks[64];
inline int bishop_attack_shifts[64];
inline uint64_t bishop_attacks[64][512];

inline uint64_t rook_attack_masks[64];
inline int rook_attack_shifts[64];
inline uint64_t rook_attacks[64][4096];

inline uint64_t squares_between_bb[nsquares][nsquares];
inline uint64_t line[nsquares][nsquares];
inline uint64_t pawn_attacks[ncolors][nsquares];
inline uint64_t pseudo_legal_attacks[npiece_types][nsquares];

uint64_t get_bishop_attacks(square sq, uint64_t occ);
uint64_t get_bishop_attacks_for_init(square sq, uint64_t occ);
uint64_t get_rook_attacks(square sq, uint64_t occ);

inline uint64_t reverse(uint64_t b);
inline uint64_t sliding_attacks(square sq, uint64_t occ, uint64_t mask);
inline uint64_t get_rook_attacks_for_init(square sq, uint64_t occ);
inline void init_rook_attacks();
inline uint64_t get_xray_rook_attacks(square sq, uint64_t occ, uint64_t blockers);
inline void init_bishop_attacks();
inline uint64_t get_xray_bishop_attacks(square sq, uint64_t occ, uint64_t blockers);

template <piece_type P>
constexpr uint64_t attacks(const square s, const uint64_t occ)
{
  return P == rook
           ? get_rook_attacks(s, occ)
           : P == bishop
           ? get_bishop_attacks(s, occ)
           : P == queen
           ? attacks<rook>(s, occ) | attacks<bishop>(s, occ)
           : pseudo_legal_attacks[P][s];
}

constexpr uint64_t attacks(const piece_type pt, const square s, const uint64_t occ)
{
  switch (pt)
  {
  case rook:
    return attacks<rook>(s, occ);
  case bishop:
    return attacks<bishop>(s, occ);
  case queen:
    return attacks<queen>(s, occ);
  case pawn: break;
  case knight: break;
  case king: break;
  default:
    return pseudo_legal_attacks[pt][s];
  }
  return 0;
}

constexpr uint64_t pawnattacks(const color c, const uint64_t p)
{
  return c == white ? shift(northwest, p) | shift(northeast, p) : shift(southwest, p) | shift(southeast, p);
}

constexpr uint64_t pawnattacks(const color c, const square s)
{
  return pawn_attacks[c][s];
}

inline void init_squares_between();
inline void init_line();
